snippet "^#!" "#!/usr/bin/env ruby" r
#!/usr/bin/env ruby
$0
endsnippet

snippet "^# ?[uU][tT]?[fF]?-?8?" "# encoding: UTF-8" r
# encoding: UTF-8
$0
endsnippet

# ----------
# Test::Unit
# ----------
snippet "^tc" "class ... < Test::Unit::TestCase" r
require 'test/unit'

class `!p 
words = snip.basename.split('_')
snip.rv = ''.join(w.capitalize() for w in words)
` < Test::Unit::TestCase
  $0
end
endsnippet

snippet dt "def test_" b
def test_$1
  $0
end
endsnippet

snippet as "assert" b
assert ${1:true}, '${0:message}'
endsnippet

snippet ase "assert_equal" b
assert_equal ${1:expected}, ${0:actual}
endsnippet

snippet asne "assert_not_equal" b
assert_not_equal ${1:unexpected}, ${0:actual}
endsnippet

snippet asr "assert_raise" b
assert_raise(${1:exception}) { $0 }
endsnippet

snippet asrt "assert_respond_to" b
assert_respond_to ${1:object}, :${0:method}
endsnippet

# -----
# RSpec
# -----
snippet "^rspec" "require 'spec_helper'" r
require 'spec_helper'
require '`!p
words = snip.basename.split('_')
words.remove('spec')
snip.rv = ''.join(words)
`'

describe `!p 
words = snip.basename.split('_')
words.remove('spec')
snip.rv = ''.join(w.capitalize() for w in words)
` do
  $0
end
endsnippet

snippet des "describe '' do...end" b
describe '$1' do
  $0
end
endsnippet

snippet con "context '' do...end" b
context '$1' do
  $0
end
endsnippet

snippet sub "subject {...}" b
subject { $0 }
endsnippet

snippet let "let(:var) {...}" b
let(:${1:var}) { $0 }
endsnippet

snippet bef "before do...end" b
before do
  $0
end
endsnippet

snippet bef{ "before { ... }" b
before { $0 }
endsnippet

snippet it "it '' do...end" b
it '$1' do
  $0
end
endsnippet

snippet it{ "it { should... }" b
it { should $0 }
endsnippet

snippet its "its(:something) { should...} " b
its(:${1:something}) { should $0 }
endsnippet

# ---------
# Benchmark
# ---------
snippet "^bench(mark)?" "require 'benchmark' ..." r
#!/usr/bin/env ruby
require 'benchmark'

Benchmark.bmbm do |b|
  b.report('${1:some_method}') do
    $0
  end
end
endsnippet
